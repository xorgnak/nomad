require 'redis-objects'
require 'cinch'
require 'pry'

module MUD
  EVENTS = Redis::HashKey.new("MUD:EVENTS")
  class Mud
    def initialize
    end
    def person p
      Person.new(p)
    end
  end
  class Person
    include Redis::Objects
    value :coord
    hash_key :attr
    def initialize i
      @id = i
      @here = Place.new('0:0:0')
      @here.people << @id 
    end
    def id
      @id
    end
    def move p
      self.coord.value = p
      @here.people.delete(@id)
      @here = Place.new(self.coord.value)
      @here.people << @id
    end
    def here
      @here
    end
  end
  class Place
    include Redis::Objects
    hash_key :attr
    sorted_set :stat
    sorted_set :things
    set :people
    hash_key :thing
    hash_key :events
    def initialize i
      coord = i.split(":")
      @coord = { x: coord[0], y: coord[1], z: coord[2] }
      @id = i
    end
    def id
      @id
    end
    def make t, e, ev={}
      self.thing[t] = e
      self.things.incr(t)
      ev.each_pair {|k,v| EVENTS[ @id + ":" + t + ":" + k ] = v; self.events[t + ":" + k] = v }
    end
    def coord
      @coord
    end
  end
  
  def self.start
    Mud.new()
  end
end

@mud = MUD.start

@bot = Cinch::Bot.new do
  configure do |c|
    c.server = 'localhost'
    c.channels = [ '#void', Redis::Set.new('CHANNELS').members.to_a ].flatten
  end
  on(:message) { |m| @mud.eval(m) }
end

begin
  Process.detach( fork { @bot.start } )
  Pry.start
rescue => e
  Redis.new.publish('ERROR', e.message)
end
