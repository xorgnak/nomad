var state = {};

var id = '<%= @id %>'

var lastPeerId = null;
var peer = null; // own peer object
var conn = null;

peer = new Peer(id, {
    debug: 2
});

peer.on('open', function (id) {
    // Workaround for peer.reconnect deleting previous id
    if (peer.id === null) {
        log('Received null id from peer open');
        peer.id = lastPeerId;
    } else {
        lastPeerId = peer.id;
    }
    log('ID: ' + peer.id);
    var pool = <%= JSON.generate(pool.members.to_a) %>;
    $('#qrcode').qrcode('https://<%= OPTS[:domain] %>/?u=' + peer.id);
    log('ready to scan...');
});
peer.on('connection', function (c) {
    c.on('open', function() {
    log('incomming connection...');
        c.send(JON.stringify(state));
    });
});
peer.on('disconnected', function () {
    log('Connection lost. Please reconnect');
    peer.id = lastPeerId;
    peer._lastServerId = lastPeerId;
    peer.reconnect();
});
peer.on('close', function() {
    conn = null;
    log('Connection destroyed');
});
peer.on('error', function (err) {
    log(err);
});

/**
 * Create the connection between the two Peers.
 *
 * Sets up callbacks that handle any events related to the
 * connection and data received on it.
 */
function mine(p) {
    // Close old connection
    if (conn) { conn.close(); }
    
    // Create connection to destination peer specified in the input field
    conn = peer.connect(p, {
        reliable: true
    });
    
    conn.on('open', function () {
        log("outgoing connection to: " + conn.peer);
	conn.send(JSON.stringify(state));
    });
    conn.on('data', function(d) {
    J = JSON.stringify(d)
    log('data:' + d);
    });
    conn.on('close', function () {
        log("disconected from: " + conn.peer);
    });
};
